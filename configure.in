#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.53])
AC_INIT([MATE Games], [1.1.0],
  [http://bugzilla.mate.org/enter_bug.cgi?product=mate-games],
  [mate-games])

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([gnomine/gnomine.c])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([1.9 no-dist-gzip dist-bzip2 foreign])

m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])

if test -z "$enable_maintainer_mode"; then
  enable_maintainer_mode=yes
fi
AM_MAINTAINER_MODE([enable])

# First parse the list of enabled games, so we know which options
# we support and which features to check for

# This is the canonical list of all game subdirectories.
allgames="aisleriot quadrapassel gnect gnomine swell-foop mahjongg gtali gnotravex gnotski glines iagno glchess gnobots2 gnibbles mate-sudoku lightsoff"
AC_SUBST([allgames])
staginggames=""
AC_SUBST([staginggames])

gamelist=""

AC_MSG_CHECKING([which games to build])

AC_ARG_WITH([games],
  [--with-games=game1,game2,...],
  [],[with_games=all])

AC_ARG_ENABLE([games],
  [AS_HELP_STRING([--enable-games=list],[Enable the games in the comma separated list ("all" and "none" are valid)])],
  [with_games="$enableval"],[])

if test -n "$with_games"; then
  gamelist=""
  IFS="${IFS=	}"; gg_saved_ifs="$IFS"; IFS=","
  for item in $with_games; do
    case $item in
      all) gamelist="$allgames" ;;
      none) gamelist="" ;;
      *) if test -z "$gamelist"; then
           gamelist="$item"
         else
           gamelist="$gamelist $item"
         fi
         ;;
    esac
  done
  IFS="$gg_saved_ifs"
else
  gamelist="$allgames"   
fi

## This has a particularly silly name because autoconf doesn't allow 
## --disable-foo to have arguments so we have to use an --enable-fubar form.
AC_ARG_ENABLE(omitgames,
  AC_HELP_STRING([--enable-omitgames=list],
    [Don't compile games in the comma separated list. ("all" and "none" are valid)]))
if test -n "$enable_omitgames"; then
   enable_omitgames=`echo ,"${enable_omitgames}", | sed -e 's/[[	,]][[	,]]*/ /g' -e 's/,$//'`
   omittedgames=""
   gamelist=""
   for item in ${enable_omitgames}; do
     for game in ${allgames}; do
       case ${item} in
	  all) omittedgames=${allgames};;
	  none) omittedgames="";;
          ${game}) omittedgames="${game} ${omittedgames}";;
	  *) ;; 
        esac
     done
   done
   for game in ${allgames}; do
     case ${omittedgames} in
       *${game}*) ;;
       *) gamelist="${gamelist} ${game}";;
     esac
   done
elif test -z "$gamelist"; then
   # Everything on by default
   gamelist=${allgames}
fi

## This is the staging area
## These games aren't quite ready for prime-time

AC_MSG_CHECKING([whether to enable staging games])
AC_ARG_ENABLE([staging],
  [AS_HELP_STRING([--enable-staging],[whether to enable beta game support (default: disabled)])],[],[])
AC_MSG_RESULT([$enable_staging])

if test "$enable_staging" = "yes"; then
	gamelist="${gamelist} ${staginggames}"
fi

AC_MSG_RESULT([$gamelist])

AC_SUBST([gamelist])

# Feature matrix

need_cxx=no
need_rsvg=no
need_guile=no
need_python=no
need_clutter=no
need_dbus_glib=no
want_sound=no
allow_gnuchess=no
allow_smclient=no
disallow_hildon=no
require_gtk_2_16=no
libgames_support_full=no

for game in $gamelist; do
  case $game in
    quadrapassel) need_cxx=yes ;;
    *) ;;
  esac
  case $game in
    aisleriot) need_guile=yes ;;
    *) ;;
  esac
  case $game in
    glchess) allow_gnuchess=yes ;;
    *) ;;
  esac
  case $game in
    glchess|mate-sudoku) need_python=yes ;;
    *) ;;
  esac
  case $game in
    aisleriot|gnect|gnibbles|gnobots2|quadrapassel|iagno) want_sound=yes ;;
    *) ;;
  esac
  case $game in
    aisleriot) ;;
    *) disallow_hildon=yes ;;
  esac
  case $game in
    aisleriot) ;;
    *) need_rsvg=yes ;;
  esac
  case $game in
    aisleriot|glines|gnobots2|gnomine|gnotravex|gnotski|iagno) allow_smclient=yes ;;
    *) ;;
  esac
  case $game in
    quadrapassel|lightsoff|swell-foop|gnibbles) need_clutter=yes ;;
    *) ;;
  esac
  case $game in
    aisleriot) ;;
    *) require_gtk_2_16=yes ;;
  esac
  case $game in
    aisleriot) ;;
    *) libgames_support_full=yes ;;
  esac
done

AM_CONDITIONAL([LIBGAMES_SUPPORT_FULL],[test "$libgames_support_full" = "yes"])

# Set a conditional for each game to build

for game in $allgames $staginggames; do
  eval AS_TR_SH([build_$game])=no
done
for game in $gamelist; do
  eval AS_TR_SH([build_$game])=yes
done

AM_CONDITIONAL([BUILD_AISLERIOT],[test "$build_aisleriot" = "yes"])
AM_CONDITIONAL([BUILD_GLCHESS],[test "$build_glchess" = "yes"])
AM_CONDITIONAL([BUILD_GLINES],[test "$build_glines" = "yes"])
AM_CONDITIONAL([BUILD_GNECT],[test "$build_gnect" = "yes"])
AM_CONDITIONAL([BUILD_GNIBBLES],[test "$build_gnibbles" = "yes"])
AM_CONDITIONAL([BUILD_GNOBOTS2],[test "$build_gnobots2" = "yes"])
AM_CONDITIONAL([BUILD_MATE_SUDOKU],[test "$build_mate_sudoku" = "yes"])
AM_CONDITIONAL([BUILD_QUADRAPASSEL],[test "$build_quadrapassel" = "yes"])
AM_CONDITIONAL([BUILD_GNOMINE],[test "$build_gnomine" = "yes"])
AM_CONDITIONAL([BUILD_GNOTRAVEX],[test "$build_gnotravex" = "yes"])
AM_CONDITIONAL([BUILD_GNOTSKI],[test "$build_gnotski" = "yes"])
AM_CONDITIONAL([BUILD_GTALI],[test "$build_gtali" = "yes"])
AM_CONDITIONAL([BUILD_IAGNO],[test "$build_iagno" = "yes"])
AM_CONDITIONAL([BUILD_LIGHTSOFF],[test "$build_lightsoff" = "yes"])
AM_CONDITIONAL([BUILD_MAHJONGG],[test "$build_mahjongg" = "yes"])
AM_CONDITIONAL([BUILD_SWELL_FOOP],[test "$build_swell_foop" = "yes"])

# Locate various programs

PKG_PROG_PKG_CONFIG([0.15])

AC_PROG_CC
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_SED

if test "$need_cxx" = "yes"; then
  AC_PROG_CXX

  # Check whether a C++ was found (AC_PROG_CXX sets $CXX to "g++" even when it
  # doesn't exist)
  AC_LANG_PUSH([C++])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],[],[AC_MSG_ERROR([No C++ compiler found])])
  AC_LANG_POP([C++])
fi

AM_PROG_CC_C_O

AC_PROG_LIBTOOL

MATE_COMMON_INIT
MATE_DEBUG_CHECK
MATE_COMPILE_WARNINGS([maximum])
MATE_CXX_WARNINGS([yes])
MATE_MAINTAINER_MODE_DEFINES

# *****************
# Distribution info
# *****************

LSB_DISTRIBUTOR=
LSB_DISTRIBUTION=

AC_PATH_PROG([LSB_RELEASE],[lsb_release],[false])
if test "$LSB_RELEASE" != "false"; then
  LSB_DISTRIBUTOR="$($LSB_RELEASE -s -i | sed 's,^\",,;s,\"$,,')"
  LSB_DISTRIBUTION="$($LSB_RELEASE -s -d | sed 's,^\",,;s,\"$,,')"
fi

AC_DEFINE_UNQUOTED([LSB_DISTRIBUTOR],["$LSB_DISTRIBUTOR"],[The distributor ID])
AC_DEFINE_UNQUOTED([LSB_DISTRIBUTION],["$LSB_DISTRIBUTION"],[The full distribution description])

dnl ****************************************************************************
dnl * Python 2.4
dnl ****************************************************************************

AM_PATH_PYTHON([2.4],[have_python=yes],[have_python=no])

# ************
# Dependencies
# ************

# Check which platform to use

AC_MSG_CHECKING([for which platform to build])
AC_ARG_WITH([platform],
  [AS_HELP_STRING([--with-platform=mate|hildon|gtk-only (default: mate)])],
  [case "$withval" in
    mate|hildon|gtk-only) ;;
    maemo) with_platform=hildon with_platform_variant=maemo3 ;; # compat
    *) AC_MSG_ERROR([invalid argument "$withval" for --with-platform]) ;;
   esac],
  [with_platform=mate])
AC_MSG_RESULT([$with_platform])

if test "$with_platform" = "hildon"; then
  # "maemo" is Maemo 4.x
  AC_MSG_CHECKING([for which platform variant to build])
  AC_ARG_WITH([platform-variant],
    [AS_HELP_STRING([--with-platform-variant=maemo3|maemo4|maemo5|mid (default: maemo4)])],
    [case "$withval" in
       maemo5|maemo4|maemo3|mid) ;;
       *) with_platform_variant=maemo4 ;;
     esac],
    [with_platform_variant=maemo3])
  AC_MSG_RESULT([$with_platform_variant])
fi

if test "$with_platform" = "hildon" -a "$disallow_hildon" = "yes"; then
  AC_MSG_ERROR([Trying to build with Hildon platform, but some of the following games don't support this: $gamelist])
fi

AM_CONDITIONAL([HAVE_MATE],[test "$with_platform" = "mate"])
AM_CONDITIONAL([HAVE_HILDON],[test "$with_platform" = "hildon"])
AM_CONDITIONAL([HAVE_MAEMO],[test "$with_platform" = "hildon" -a "$with_platform_variant" != "mid"])
AM_CONDITIONAL([HAVE_MAEMO_3],[test "$with_platform" = "hildon" -a "$with_platform_variant" = "maemo3"])
AM_CONDITIONAL([HAVE_MAEMO_4],[test "$with_platform" = "hildon" -a "$with_platform_variant" = "maemo4"])
AM_CONDITIONAL([HAVE_MAEMO_5],[test "$with_platform" = "hildon" -a "$with_platform_variant" = "maemo5"])

if test "$with_platform" = "mate"; then
  AC_DEFINE([HAVE_MATE],[1],[Define if MATE support is enabled])
fi
if test "$with_platform" = "hildon"; then
  AC_DEFINE([HAVE_HILDON],[1],[Define if Hildon support is enabled])

  if test "$with_platform_variant" != "mid"; then
    AC_DEFINE([HAVE_MAEMO],[1],[Define if Maemo support is enabled])
  fi
  if test "$with_platform_variant" = "maemo3"; then
    AC_DEFINE([HAVE_MAEMO_3],[1],[Define if Maemo 3.x support is enabled])
  fi
  if test "$with_platform_variant" = "maemo4"; then
    AC_DEFINE([HAVE_MAEMO_4],[1],[Define if Maemo 4.x support is enabled])
  fi
  if test "$with_platform_variant" = "maemo5"; then
    AC_DEFINE([HAVE_MAEMO_5],[1],[Define if Maemo 5.x support is enabled])
  fi
fi

# Win32 platform

AC_CANONICAL_HOST

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-cygwin*|*-*-mingw*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL([PLATFORM_WIN32],[test "$platform_win32" = "yes"])

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    os_win32=yes
    ;;
  *)
    os_win32=no
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL([PLATFORM_WIN32_NATIVE],[test "$os_win32" = "yes"])

# ********
# Features
# ********

# *****
# Sound
# *****

if test "$want_sound" = "yes"; then
  AC_MSG_CHECKING([whether to enable sound support])
  AC_ARG_ENABLE([sound],
    [AS_HELP_STRING([--enable-sound],[Enable sound using libcanberra])],
    [],[case "$with_platform" in
          mate|gtk-only) enable_sound=yes ;;
          hildon) case "$with_platform_variant" in
                    maemo5) enable_sound=yes ;;
                    *) enable_sound=no ;;
                  esac
        esac])
  AC_MSG_RESULT([$enable_sound])
else
  enable_sound=no
fi

# *******
# Clutter
# *******

# We're using need_guile as a quick way to check whether building aisleriot
if test "$need_guile" = "yes"; then
  AC_MSG_CHECKING([whether to enable aisleriot/clutter])
  AC_ARG_ENABLE([aisleriot-clutter],
    [AS_HELP_STRING([--enable-aisleriot-clutter],[Whether to enable the clutter version of aisleriot (default: disabled)])],
    [],[enable_aisleriot_clutter=no])
  AC_MSG_RESULT([$enable_aisleriot_clutter])

  if test "$enable_aisleriot_clutter" = "yes"; then
    # Distro packagers: DO NOT ENABLE AISLERIOT/CLUTTER IN YOUR DISTRO PACKAGES, OR ELSE!
    AC_MSG_NOTICE([Aisleriot/Clutter is experimental; do not enable this for distribution packages!])
    need_clutter=yes
  fi
fi

AM_CONDITIONAL([ENABLE_AISLERIOT_CLUTTER],[test "$enable_aisleriot_clutter" = "yes"])

case "$with_platform" in
  mate|gtk-only) ;;
  hildon) if test "$need_clutter" = "yes"; then
            AC_MSG_ERROR([Clutter is not supported on hildon; disable Matetris, Lights Off and Aisleriot/Clutter])
          fi
          ;;
esac

# ******************
# Card theme formats
# ******************

AC_MSG_CHECKING([for requested card theme formats])
AC_ARG_WITH([card-theme-formats],
  [AS_HELP_STRING([--with-card-theme-formats],[which card theme formats to support (svg, fixed, kde, pysol, defaults, all)])],
  [],[case "$with_platform" in
        mate|gtk-only) with_card_theme_formats="svg" ;;
        hildon) with_card_theme_formats="fixed" ;;
      esac])

enable_card_theme_format_svg=no
enable_card_theme_format_kde=no
enable_card_theme_format_fixed=no
enable_card_theme_format_sliced=no
enable_card_theme_format_pysol=no

IFS="${IFS=	}"; gg_saved_ifs="$IFS"; IFS=","
for format in "$with_card_theme_formats"; do
  case "$format" in
    all) enable_card_theme_format_svg=yes
         enable_card_theme_format_kde=yes
         enable_card_theme_format_fixed=yes
         enable_card_theme_format_sliced=yes
         enable_card_theme_format_pysol=yes
         with_card_theme_formats="svg,kde,fixed,sliced,pysol"
         ;;
    svg) enable_card_theme_format_svg=yes ;;
    kde) enable_card_theme_format_kde=yes ;;
    fixed) enable_card_theme_format_fixed=yes ;;
    sliced) enable_card_theme_format_svg=yes ;;
    pysol) enable_card_theme_format_pysol=yes ;;
    *) AC_MSG_ERROR([unknown card theme format $format]) ;;
  esac
done
IFS="$gg_saved_ifs"

AC_MSG_RESULT([$with_card_theme_formats])

if test "$enable_card_theme_format_svg" = "yes"; then
  AC_DEFINE([ENABLE_CARD_THEME_FORMAT_SVG],[1],[Define to enable SVG card theme format support])
  need_rsvg=yes
fi
if test "$enable_card_theme_format_kde" = "yes"; then
  AC_DEFINE([ENABLE_CARD_THEME_FORMAT_KDE],[1],[Define to enable KDE card theme format support])
  need_rsvg=yes
fi
if test "$enable_card_theme_format_fixed" = "yes"; then
  AC_DEFINE([ENABLE_CARD_THEME_FORMAT_FIXED],[1],[Define to enable prerendered card theme format support])
fi
if test "$enable_card_theme_format_sliced" = "yes"; then
  AC_DEFINE([ENABLE_CARD_THEME_FORMAT_SLICED],[1],[Define to enable pre-2.19 card theme format support])
fi
if test "$enable_card_theme_format_pysol" = "yes"; then
  AC_DEFINE([ENABLE_CARD_THEME_FORMAT_PYSOL],[1],[Define to enable PySol card theme format support])
fi

AM_CONDITIONAL([ENABLE_CARD_THEME_FORMAT_SVG],[test "$enable_card_theme_format_svg" = "yes"])
AM_CONDITIONAL([ENABLE_CARD_THEME_FORMAT_KDE],[test "$enable_card_theme_format_kde" = "yes"])
AM_CONDITIONAL([ENABLE_CARD_THEME_FORMAT_FIXED],[test "$enable_card_theme_format_fixed" = "yes"])
AM_CONDITIONAL([ENABLE_CARD_THEME_FORMAT_SLICED],[test "$enable_card_theme_format_sliced" = "yes"])
AM_CONDITIONAL([ENABLE_CARD_THEME_FORMAT_PYSOL],[test "$enable_card_theme_format_pysol" = "yes"])

# Default card theme

AC_MSG_CHECKING([which card theme to use by default])
AC_ARG_WITH([default-card-theme],
  [AS_HELP_STRING([--with-default-card-theme=NAME],[Which card theme to use by default (default: gnomangelo_bitmap)])],
  [],[case "$with_platform" in
        mate|gtk-only) with_default_card_theme=gnomangelo_bitmap.svg ;;
        hildon) with_default_card_theme=paris.card-theme ;;
      esac])
AC_MSG_RESULT([$with_default_card_theme])

AC_DEFINE_UNQUOTED([AR_CARD_THEME_DEFAULT],["$with_default_card_theme"],[The default card theme])

AC_MSG_CHECKING([which card theme format to use by default])
AC_ARG_WITH([default-card-theme-format],
  [AS_HELP_STRING([--with-default-card-theme-format=NAME],[Which card theme format to use by default (default: platform dependent)])],
  [],[case "$with_platform" in
        mate|gtk-only) with_default_card_theme_format=svg ;;
        hildon) with_default_card_theme_format=fixed ;;
      esac])
AC_MSG_RESULT([$with_default_card_theme_format])

case "$with_default_card_theme_format" in
  svg|kde|fixed|sliced|pysol) ;;
  *) AC_MSG_ERROR([card theme format $with_default_card_theme_format unknown])
esac

AC_DEFINE_UNQUOTED([AR_CARD_THEME_DEFAULT_FORMAT_STRING],["$with_default_card_theme_format"],[The default card theme format type string])

# ********************
# Card theme installer
# ********************

AC_MSG_CHECKING([whether card themes installer support is requested])
AC_ARG_ENABLE([card-themes-installer],
  [AS_HELP_STRING([--enable-card-themes-installer],[Enable card theme installer with PackageKit (default: disabled)])],
  [],[enable_card_themes_installer=no])
AC_MSG_RESULT([$enable_card_themes_installer])

if test "$enable_card_themes_installer" = "yes"; then
  if test -z "$LSB_DISTRIBUTOR" -o -z "$LSB_DISTRIBUTION"; then
    AC_MSG_ERROR([couldn't determine the distribution information using lsb_release])
  fi

  AC_DEFINE([ENABLE_CARD_THEMES_INSTALLER],[1],[Define if card theme installer support is enabled])
  need_dbus_glib=yes
fi

AM_CONDITIONAL([ENABLE_CARD_THEMES_INSTALLER],[test "$enable_card_themes_installer" = "yes"])

# ******************
# Extra Debugging UI
# ******************

AC_MSG_CHECKING([whether extra debugging UI in Aisleriot is requested])
AC_ARG_ENABLE([debug-ui],
  [AS_HELP_STRING([--debug-ui],[Enable extra debugging UI in Aisleriot (default: disabled)])],
  [],[enable_debug_ui=no])
AC_MSG_RESULT([$enable_debug_ui])

if test "$enable_debug_ui" = "yes"; then
  AC_DEFINE([ENABLE_DEBUG_UI],[1],[Define extra debugging UI in Aisleriot is enabled])
fi

AM_CONDITIONAL([ENABLE_DEBUG_UI],[test "$enable_debug_ui" = "yes"])

# ********************
# Checks for libraries
# ********************

PYGTK_REQUIRED=2.14.0

if test "$with_platform" = "hildon" -a "$with_platform_variant" = "maemo3"; then
  GTK_REQUIRED=2.6.0
elif test "$require_gtk_2_16" = "yes"; then
  GTK_REQUIRED=2.16.0
else
  GTK_REQUIRED=2.8.0
fi

MATECONF_REQUIRED=1.0.0
CAIRO_REQUIRED=1.0
RSVG_REQUIRED=2.14.0
GSTREAMER_REQUIRED=0.10.11
HILDON_LIBS_REQUIRED=0.14
HILDON_1_REQUIRED=1.00
DBUS_GLIB_REQUIRED=0.75
LIBCANBERRA_GTK_REQUIRED=0

# Check for common modules

need_gthread=no
PKG_CHECK_MODULES([GTHREAD],[gthread-2.0])
AC_SUBST([GTHREAD_CFLAGS])
AC_SUBST([GTHREAD_LIBS])

PKG_CHECK_MODULES([GTK],[gtk+-2.0 >= $GTK_REQUIRED])
AC_SUBST([GTK_CFLAGS])
AC_SUBST([GTK_LIBS])

AM_MATECONF_SOURCE_2
AC_PATH_PROG([MATECONFTOOL],[mateconftool-2])

# Check for MATE modules

if test "$with_platform" = "mate"; then
  PKG_CHECK_MODULES([MATE],[mateconf-2.0 >= $MATECONF_REQUIRED])
  AC_SUBST([MATE_CFLAGS])
  AC_SUBST([MATE_LIBS])

  need_gthread=yes
fi

# Check for Hildon modules

if test "$with_platform" = "hildon"; then
  if test "$with_platform_variant" = "maemo3"; then
    PKG_CHECK_MODULES([HILDON],[
      libosso
      hildon-libs >= $HILDON_LIBS_REQUIRED])
  else
    PKG_CHECK_MODULES([HILDON],[
      libosso
      dbus-1
      hildon-1 >= $HILDON_1_REQUIRED])
  fi

  AC_SUBST([HILDON_CFLAGS])
  AC_SUBST([HILDON_LIBS])
fi

# Check for librsvg

have_rsvg=no
if test "$need_rsvg" = "yes"; then
  have_rsvg=yes

  # Errors out if rsvg is not found
  PKG_CHECK_MODULES([RSVG],[
    librsvg-2.0 >= $RSVG_REQUIRED
    cairo >= $CAIRO_REQUIRED])

  AC_SUBST([RSVG_CFLAGS])
  AC_SUBST([RSVG_LIBS])

  AC_DEFINE([HAVE_RSVG],[1],[Refine if librsvg is available])

  # This only existed in some pre-gio rsvg versions
  rsvg_matevfs=$($PKG_CONFIG --variable=mate_vfs_supported librsvg-2.0)
  if test "$rsvg_matevfs" = "yes"; then
    AC_DEFINE([HAVE_RSVG_MATEVFS],[1],[Define if librsvg has mate-vfs support])

    need_gthread=yes
  fi
fi

AM_CONDITIONAL([HAVE_RSVG],[test "$have_rsvg" = "yes"])

# Check for Clutter

if test "$need_clutter" = "yes"; then
  CLUTTER_REQUIRED=1.0.0

  PKG_CHECK_MODULES([CLUTTER],[clutter-1.0 >= $CLUTTER_REQUIRED])
  AC_SUBST([CLUTTER_CFLAGS])
  AC_SUBST([CLUTTER_LIBS])

  PKG_CHECK_MODULES([CLUTTER_GTK],
    [clutter-gtk-0.90 >= 0.90.0],[],
    [PKG_CHECK_MODULES([CLUTTER_GTK],
      [clutter-gtk-0.10 >= 0.10.2])])
  AC_SUBST([CLUTTER_GTK_CFLAGS])
  AC_SUBST([CLUTTER_GTK_LIBS])
fi

AM_CONDITIONAL([HAVE_CLUTTER],[test "$need_clutter" = "yes"])

# Check for DBUS/GLIB

if test "$need_dbus_glib" = "yes"; then
  PKG_CHECK_MODULES([DBUS_GLIB],[dbus-glib-1 >= $DBUS_GLIB_REQUIRED])
  AC_SUBST([DBUS_GLIB_CFLAGS])
  AC_SUBST([DBUS_GLIB_LIBS])
fi

# Check for PyGTK

if test "$have_python" = "yes"; then
  PKG_CHECK_MODULES([PYGTK],[
    pygtk-2.0 >= $PYGTK_REQUIRED],
    [have_pygtk=yes],[have_pygtk=no])
fi

enable_python=no
if test "$have_python" = "yes" -a "$have_pygtk" = "yes"; then
  AC_SUBST([PYGTK_CFLAGS])
  AC_SUBST([PYGTK_LIBS])
  
  enable_python=yes
fi

if test "$enable_python" = "no" -a "$need_python" = "yes"; then
  AC_MSG_ERROR([Some games need python, but python or pygtk packages were not found.])
fi

AM_CONDITIONAL([HAVE_PYTHON],[test "$enable_python" = "yes"])

# GThread

AM_CONDITIONAL([WITH_GTHREAD],[test "$need_gthread" = "yes"])

# libcanberra

if test "$enable_sound" = "yes"; then
  PKG_CHECK_MODULES([CANBERRA_GTK],[libcanberra-gtk >= $LIBCANBERRA_GTK_REQUIRED],[],
    [AC_MSG_ERROR([Sound support was requested, but libcanberra-gtk not found.])])

  AC_DEFINE([ENABLE_SOUND],[1],[Define if sound support is enabled])
fi

AM_CONDITIONAL([ENABLE_SOUND],[test "$enable_sound" = "yes"])

# SMClient

SMCLIENT_PKGS=
if test "$allow_smclient" = "yes"; then
  GDK_TARGET="$($PKG_CONFIG --variable target gdk-2.0)"

  AC_MSG_CHECKING([which smclient backend to use])
  AC_ARG_WITH([smclient],
    [AS_HELP_STRING([--with-smclient],[which smclient backend to use (xsmp|win32|quartz|no)])],
    [],
    [case "$with_platform" in
       mate|gtk-only) case "$GDK_TARGET" in
                         x11) with_smclient=xsmp SMCLIENT_PKGS="sm ice" ;;
                         win32|quartz) with_smclient=$GDK_TARGET ;;
                         *) with_smclient=no ;;
                       esac
                       ;;
       hildon) with_smclient=no ;;
     esac])
  AC_MSG_RESULT([$with_smclient])

  if test "$with_smclient" != "no"; then
    if test -n "$SMCLIENT_PKGS"; then
      PKG_CHECK_MODULES([SMCLIENT],[$SMCLIENT_PKGS])
    fi

    AC_DEFINE([WITH_SMCLIENT],[1],[Define if smclient is enabled])
  fi

else
  with_smclient=no
fi

AM_CONDITIONAL([WITH_SMCLIENT],[test "$with_smclient" != "no"])
AM_CONDITIONAL([WITH_SMCLIENT_XSMP],[test "$with_smclient" = "xsmp"])
AM_CONDITIONAL([WITH_SMCLIENT_WIN32],[test "$with_smclient" = "win32"])
AM_CONDITIONAL([WITH_SMCLIENT_QUARTZ],[test "$with_smclient" = "quartz"])

# *****************
# Extra build tools
# *****************

AC_PATH_PROG([GLIB_GENMARSHAL],[glib-genmarshal])

# glib-genmarshal --internal only exists since 2.14
if $PKG_CONFIG --exists "glib-2.0 >= 2.14.0" ; then
  GLIB_GENMARSHAL_INTERNAL="--internal"
else
  GLIB_GENMARSHAL_INTERNAL=
fi
AC_SUBST([GLIB_GENMARSHAL_INTERNAL])

if test "$platform_win32" = "yes" -a "$os_win32" = "yes"; then
  AC_CHECK_TOOL([WINDRES],[windres],[no])
  if test "$WINDRES" = "no"; then
    AC_MSG_ERROR([windres is required for native win32])
  fi
fi

# ********
# Binreloc
# ********

AC_MSG_CHECKING([whether to enable binary relocation support])
AC_ARG_ENABLE([binreloc],
  [AS_HELP_STRING([--enable-binreloc],[enable binary relocation support (default: disabled)])],
  [],
  [enable_binreloc="$platform_win32"])
AC_MSG_RESULT([$enable_binreloc])

if test "$enable_binreloc" = "yes"; then

  # Check that all variables use the same prefix
  # Note: datarootdir exists only since autoconf 2.60, so we have to
  # check for the old and the new form of datadir.
  if test "$exec_prefix" != '${prefix}' -o \
          "$bindir" != '${exec_prefix}/bin' -o \
          "$sbindir" != '${exec_prefix}/sbin' -o \
          "$libdir" != '${exec_prefix}/lib' -o \
          "$libexecdir" != '${exec_prefix}/libexec' -o \
          "$sysconfdir" != '${prefix}/etc' -o \
          "$localstatedir" != '${prefix}/var' -o \
          \( -n "$datarootdir" -a "$datarootdir" != '${prefix}/share' \) -o \
          \( "$datadir" != '${datarootdir}' -a "$datadir" != '${prefix}/share' \) -o \
          \( "$localedir" != '${datarootdir}/locale' -a "$localedir" != '${datadir}/locale' \) -o \
          \( "$mandir" != '${datarootdir}/man' -a "$mandir" != '${datadir}/man' \); then
    AC_MSG_ERROR([cannot use binary relocation with different prefixes])
  fi

  AC_DEFINE([ENABLE_BINRELOC],[1],[Define for binary relocation support])
fi

# ********

AM_CFLAGS="$AM_CFLAGS $WARN_CFLAGS"
AM_CXXFLAGS="$AM_CXXFLAGS $WARN_CXXFLAGS"

# ****
# i18n
# ****

GETTEXT_PACKAGE=mate-games
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [The gettext package name])
AM_GLIB_GNU_GETTEXT

IT_PROG_INTLTOOL([0.35.0])

# ********************
# Game specific checks
# ********************

have_guile=no
have_guile_1_8=no
if test "$need_guile" = "yes"; then
  AC_ARG_VAR([GUILE],[path to guile])
  if test "$ac_cv_env_GUILE_set" != "set"; then
    AC_PATH_TOOL([GUILE],[guile])
  fi

  if test -z "$GUILE" ; then
    AC_MSG_ERROR([guile not found; install guile development headers or use --enable-omitgames=aisleriot])
  fi

  AC_ARG_VAR([GUILE_CONFIG],[path to guile-config])
  if test "$ac_cv_env_GUILE_CONFIG_set" != "set"; then
    AC_PATH_TOOL([GUILE_CONFIG],[guile-config])
  fi
  if test -z "$GUILE_CONFIG"; then
    AC_MSG_ERROR([guile not found; install guile development headers or use --enable-omitgames=aisleriot])
  fi

  GUILE_CFLAGS=`$GUILE_CONFIG compile`
  GUILE_LIBS=`$GUILE_CONFIG link`
  AC_SUBST([GUILE_CFLAGS])
  AC_SUBST([GUILE_LIBS])

  # Checking for the header file is basically the only way to find
  # out if the _development_ files are present. guile-config returns
  # a value regardless of what is actually installed. The problem
  # with this is if the header ever gets moved to a non-default location.
  gg_save_CFLAGS="$CFLAGS"
  CFLAGS="$GUILE_CFLAGS $CFLAGS"
  AC_CHECK_HEADER([libguile.h],[have_guile=yes],
    [AC_MSG_ERROR([guile not found; install guile development headers or use --enable-omitgames=aisleriot])])
  CFLAGS="$gg_save_CFLAGS"

  # On 64-bit machines guile < 1.6.5 causes a crash in aisleriot
  if uname -m | grep -q 64 > /dev/null; then
    GUILE_TARGET="1.6.5"
  else
    GUILE_TARGET="1.6.0"
  fi
  if test `$GUILE -c '(if (string<? (version) (cadr (command-line))) (display "no") (display "yes")) (newline)' $GUILE_TARGET` != yes ; then
    AC_MSG_ERROR([Your version of guile is too old, please install a recent guile package (>= $GUILE_TARGET)])
  fi

  have_guile_1_8=$($GUILE -c '(if (string<? (version) (cadr (command-line))) (display "no") (display "yes")) (newline)' 1.8.0)

  if test "$have_guile_1_8" = "yes"; then
    AC_DEFINE([HAVE_GUILE_1_8],[1],[Define if guile version is 1.8.0 or above])
  fi
fi

AM_CONDITIONAL([HAVE_GUILE],[test "$have_guile" = "yes"])
AM_CONDITIONAL([HAVE_GUILE_1_8],[test "$have_guile_1_8" = "yes"])

# Possibly disable the included gnuchess

if test "$allow_gnuchess" = "yes"; then
  AC_ARG_ENABLE([gnuchess],
  [AS_HELP_STRING([--disable-gnuchess],[Disable included gnuchess for glChess])],
  [],[enable_gnuchess=yes])

  if test "$enable_gnuchess" = "yes"; then
    AC_DEFINE([ENABLE_GNUCHESS],[1],[Enable compilation of included GNU Chess as AI chess engine for glChess])
    AC_CHECK_HEADER(pthread.h, [],
                  AC_MSG_ERROR([*** Cannot find pthread.h header]))
    AC_CHECK_LIB(pthread, pthread_create,
                 [PTHREAD_LDFLAGS="$PTHREAD_LDFLAGS -lpthread"
                  PTHREAD_CFLAGS="$PTHREAD_CFLAGS -D_REENTRANT"],
                 [AC_CHECK_LIB(c_r, pthread_create,
                               [PTHREAD_LDFLAGS="$PTHREAD_LDFLAGS -pthread"
                                PTHREAD_CFLAGS="$PTHREAD_CFLAGS -D_THREAD_SAFE"],
                 AC_MSG_ERROR([*** Cannot find pthread library]))])
    AC_SUBST(PTHREAD_CFLAGS)
    AC_SUBST(PTHREAD_LDFLAGS)
  fi
fi

AM_CONDITIONAL([WITH_INCLUDED_GNUCHESS],[test "$enable_gnuchess" = "yes"])

# Check for library functions
# ===========================

AC_CHECK_FUNCS([dup2 strcasecmp strchr strerror \
                malloc vprintf], [],
               [AC_MSG_ERROR([cannot find required function])])
AC_CHECK_FUNCS([fork select]) 
AC_CHECK_FUNCS([alarm getpwuid getenv setenv close hstrerror kill socketpair])

AC_FUNC_SELECT_ARGTYPES

AC_HEADER_STDC

AC_TYPE_SIGNAL
AC_FUNC_FORK
AC_FUNC_STRCOLL
AC_FUNC_VPRINTF

# Check for PF_LOCAL/PF_UNIX
# ==========================
# There should be an autoconf macro to check this???
#
# Not having this is not necessarily a fatal error.  It should mean that
# the WinAPI interface is used instead.
AC_MSG_CHECKING([for PF_LOCAL])
AC_EGREP_CPP(PF_LOCAL,
             [#include <sys/types.h>
              #include <sys/socket.h>
              PF_LOCAL ],
             [AC_MSG_RESULT(no)
              AC_MSG_CHECKING([for PF_UNIX])
              AC_EGREP_CPP(PF_UNIX, [ #include <sys/types.h>
                                      #include <sys/socket.h>
				      PF_UNIX ],
                           [AC_MSG_RESULT(no)],
                           [AC_MSG_RESULT(yes)
                            AC_DEFINE([PF_LOCAL], PF_UNIX,
				      [PF_UNIX is available])
			    AC_DEFINE([AF_LOCAL], AF_UNIX,
				      [AF_UNIX is available])])], 
             AC_MSG_RESULT(yes))

# Check for header files
# ======================
AC_CHECK_HEADERS([fcntl.h limits.h sys/time.h time.h \
                  unistd.h], [],
                 [AC_MSG_ERROR([cannot find required header file])])
AC_CHECK_HEADERS([netdb.h sys/socket.h winsock2.h])
AC_HEADER_SYS_WAIT


# Checks for typedefs, structures, and compiler characteristics
AC_C_CONST
AC_C_VOLATILE
AC_FUNC_REALLOC
AC_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

# *************
# Documentation
# *************

# We support various ways to present help to the user:
# ghelp: using the ghelp: protocol, most likely displaying in Jaulen
# file: showing html or xhtml files in the web browser
# library: in the web browser loaded remotedly from library.mate.org
#
# Note that for help using [x]html files, we can't use mate-doc-utils.make
# since it doesn't currently support this. The packager will have to use
# mate-doc-tool directly to build the documentation in the right format.
# The help files must be installed in $(pkgdatadir)/$(DOC_MODULE)/$(LOCALE) .

AC_MSG_CHECKING([which help method to use])
AC_ARG_WITH([help-method],
  [AS_HELP_STRING([--with-help-method],[which help method to use (ghelp|file|library; default: ghelp)])],
  [],
  [case "$with_platform" in
     hildon) with_help_method=file ;;
     *) if test "$platform_win32" = "yes"; then
           with_help_method=file
         else
           with_help_method=ghelp
         fi ;;
   esac])
AC_MSG_RESULT([$with_help_method])

case "$with_help_method" in
  ghelp) AC_DEFINE([WITH_HELP_METHOD_GHELP],[1],[Define to use help using ghelp]) ;;
  file) AC_DEFINE([WITH_HELP_METHOD_FILE],[1],[Define to use help using file]) ;;
  library) AC_DEFINE([WITH_HELP_METHOD_LIBRARY],[1],[Define to use help using library.mate.org]) ;;
  *) AC_MSG_ERROR([unknown help method "$with_help_method"]) ;;
esac

if test "$with_help_method" = "file"; then
  AC_MSG_CHECKING([for help file format])
  AC_ARG_WITH([help-file-format],
    [AS_HELP_STRING([--with-help-file-format],[which file format to use for help (html|xhtml; default: html)])],
    [case "$with_help_file_format" in
       html|xhtml) ;;
       *) AC_MSG_ERROR([unknown help file format "$with_help_file_format"]) ;;
     esac],
    [with_help_file_format=html])
  AC_MSG_RESULT([$with_help_file_format])

  AC_DEFINE_UNQUOTED([HELP_FILE_FORMAT],["$with_help_file_format"],[The help file format])
fi

MATE_DOC_INIT([0.10.0],
  [have_gdu=yes],
  [have_gdu=no
   if test "$with_help_method" = "ghelp"; then
     AC_MSG_ERROR([ghelp requested, but mate-doc-utils not found!])
   fi])

AM_CONDITIONAL([BUILD_HELP],[test "$with_help_method" = "ghelp"])

# *************
# setgid checks
# *************

AC_ARG_ENABLE([setgid],
  [AS_HELP_STRING([--disable-setgid],
    [Disable the use of setgid binaries])],
  [case "${enableval}" in
    yes) setgid=true ;;
    no)  setgid=false ;;
    *) AC_MSG_ERROR([bad value ${enableval} for --disable-setgid]) ;;
   esac],
  [if test "$platform_win32" = "yes"; then
     enable_setgid=no
     setgid=false
   else
     enable_setgid=yes
     setgid=true
   fi])

scoredir='${localstatedir}/games'
scores_group=games
scores_user=games

if test "$enable_setgid" = "yes"; then
  AC_DEFINE([ENABLE_SETGID],[1],[Define if use of setgid binaries is enabled])

  AC_ARG_WITH(scores-group,
    AC_HELP_STRING([--with-scores-group=group],
      [Group for the high score tables and binaries]),
    scores_group="$withval",scores_group="games")
  AC_ARG_WITH(scores-user,
    AC_HELP_STRING([--with-scores-user=user],
      [User for the high score tables]),
    scores_user="$withval",scores_user="games")
fi

AM_CONDITIONAL([ENABLE_SETGID],[test "$enable_setgid" = "yes"])

AC_SUBST(setgid)
AC_SUBST(scores_group)
AC_SUBST(scores_user)
AC_SUBST(scoredir)

# *********************
# GObject Introspection
# *********************

GOBJECT_INTROSPECTION_CHECK([0.6.3])

##############################################

AC_SUBST([AM_CPPFLAGS])
AC_SUBST([AM_CFLAGS])
AC_SUBST([AM_CXXFLAGS])
AC_SUBST([AM_LDFLAGS])

##############################################
##############################################

AC_CONFIG_FILES([
Makefile
po/Makefile.in
icons/Makefile
sounds/Makefile
libgames-support/Makefile
gnect/Makefile
gnect/src/Makefile
gnect/data/Makefile
gnect/pixmaps/Makefile
gnect/help/Makefile
gnomine/Makefile
gnomine/help/Makefile
swell-foop/Makefile
swell-foop/help/Makefile
mahjongg/Makefile
mahjongg/help/Makefile
gtali/Makefile
gtali/pix/Makefile
gtali/help/Makefile
iagno/Makefile
iagno/help/Makefile
gnotravex/Makefile
gnotravex/gnotravex.desktop.in
gnotravex/help/Makefile
gnotravex/pixmaps/Makefile
gnotski/Makefile
gnotski/help/Makefile
glines/Makefile
glines/glines.desktop.in
glines/help/Makefile
quadrapassel/Makefile
quadrapassel/pix/Makefile
quadrapassel/help/Makefile
gnobots2/Makefile
gnobots2/help/Makefile
gnibbles/Makefile
gnibbles/help/Makefile
gnibbles/pix/Makefile
aisleriot/Makefile
aisleriot/sol.desktop.in
aisleriot/freecell.desktop.in
aisleriot/data/Makefile
aisleriot/lib/Makefile
aisleriot/rules/Makefile
aisleriot/help/Makefile
glchess/Makefile
glchess/data/Makefile
glchess/data/pieces/Makefile
glchess/data/pieces/fancy/Makefile
glchess/data/pieces/simple/Makefile
glchess/data/textures/Makefile
glchess/gnuchess/Makefile
glchess/help/Makefile
glchess/src/glchess.in
glchess/src/Makefile
glchess/src/lib/Makefile
glchess/src/lib/defaults.py
glchess/src/lib/chess/Makefile
glchess/src/lib/chess/fics/Makefile
glchess/src/lib/ggz/Makefile
glchess/src/lib/gtkui/Makefile
glchess/src/lib/scene/Makefile
glchess/src/lib/scene/cairo/Makefile
glchess/src/lib/scene/opengl/Makefile
glchess/src/lib/ui/Makefile
mate-sudoku/Makefile
mate-sudoku/src/mate-sudoku.in
mate-sudoku/src/Makefile
mate-sudoku/src/lib/Makefile
mate-sudoku/src/lib/defaults.py
mate-sudoku/src/lib/gtk_goodies/Makefile
mate-sudoku/data/Makefile
mate-sudoku/images/Makefile
mate-sudoku/help/Makefile
swell-foop/data/themes/Makefile
swell-foop/data/themes/tango/Makefile
swell-foop/data/themes/test/Makefile
swell-foop/swell-foop.desktop.in
swell-foop/src/Makefile
quadrapassel/quadrapassel.desktop.in
gnobots2/gnobots2.desktop.in
gnibbles/gnibbles.desktop.in
gnotski/gnotski.desktop.in
glchess/glchess.desktop.in
mahjongg/mahjongg.desktop.in
gtali/gtali.desktop.in
mate-sudoku/mate-sudoku.desktop.in
iagno/iagno.desktop.in
gnect/data/gnect.desktop.in
gnomine/gnomine.desktop.in
lightsoff/Makefile
lightsoff/help/Makefile
lightsoff/lightsoff.desktop.in
lightsoff/data/themes/Makefile
lightsoff/data/themes/tango/Makefile
lightsoff/data/themes/up/Makefile
lightsoff/src/Makefile
])
AC_OUTPUT

echo "
Configuration:

    Source code location:  ${srcdir}
    Compiler:              ${CC}

    Platform:              ${with_platform}"

if test -n "$with_platform_variant"; then
  echo "
    Platform variant:      ${with_platform_variant}"
fi

echo "
    Games to be compiled:  ${gamelist}

    Help method:           ${with_help_method} ${with_help_file_format}
    Using SM Client:       ${with_smclient}
    Using RSVG:            ${have_rsvg}
    Card theme formats:    ${with_card_theme_formats}
    Default theme format:  ${with_default_card_theme_format}
    Default theme:         ${with_default_card_theme}
    Sound support:         ${with_sound}
    Use setgid binaries:   ${enable_setgid}
    Scores user:           ${scores_user}
    Scores & setgid group: ${scores_group}
    Binreloc:              ${enable_binreloc}
    Introspection data:    ${enable_introspection}
"

if grep "$scores_group:" /etc/group > /dev/null; then
:;
else
echo
echo "Warning: The $scores_group group does not exist. Installation will"
echo "         succeed, but high score logging will not work. To specify a"
echo "         different group use the --with-scores-group option."
echo
fi
